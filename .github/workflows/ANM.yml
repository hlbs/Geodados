name: Sync ANM via Cloudflare Worker (Release .gz)

on:
  schedule:
    - cron: "15 6 * * *"   # 06:15 UTC (~03:15 BRT)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      WORKER: "https://anm.hermesbarros-eng.workers.dev"  # URL do seu Worker
      CHUNK_MB: "32"                                      # tamanho do bloco (MiB)
      MAX_RETRIES: "8"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar pigz
        run: |
          sudo apt-get update
          sudo apt-get install -y pigz

      - name: Baixar ANM via Worker (URL crua) em chunks + compactar + release
        shell: bash
        run: |
          set -euo pipefail

          bytes_of () { wc -c < "$1" | tr -d ' '; }

          head_size () {
            local SRC="$1"
            # HEAD no Worker com URL CRUA no ?u=
            curl -sI --http1.1 --ipv4 \
              -H "User-Agent: GH-Actions" \
              "${WORKER}/?u=${SRC}" \
            | awk 'BEGIN{IGNORECASE=1} /^Content-Length:/{print $2}' \
            | tr -d '\r'
          }

          get_range () {
            local SRC="$1"; local OUT="$2"; local START="$3"; local END="$4"
            local RET=0
            for i in $(seq 1 ${MAX_RETRIES}); do
              RET=0
              curl -L --fail-with-body --http1.1 --ipv4 \
                   --connect-timeout 60 --max-time 0 \
                   --speed-time 90 --speed-limit 16384 \
                   -H "Range: bytes=${START}-${END}" \
                   -H "User-Agent: GH-Actions Chunked" \
                   -o "${OUT}.part" \
                   "${WORKER}/?u=${SRC}" && break || RET=$?
              echo "Range retry $i (rc=$RET) for ${START}-${END}"
              sleep $(( (2**i) < 20 ? (2**i) : 20 ))
            done
            if [ "$RET" -ne 0 ]; then
              echo "FALHA range ${START}-${END} (rc=${RET})"
              return "$RET"
            fi
            cat "${OUT}.part" >> "${OUT}"
            rm -f "${OUT}.part"
          }

          chunked_download () {
            local SRC="$1"; local OUT="$2"
            local SIZE
            SIZE="$(head_size "$SRC")"
            if [ -z "${SIZE}" ]; then
              echo "Não foi possível obter Content-Length de $SRC"
              exit 65
            fi
            echo "Tamanho remoto: ${SIZE} bytes"

            local CHUNK_SIZE=$(( ${CHUNK_MB} * 1024 * 1024 ))
            local OFFSET=0
            : > "${OUT}"

            while [ "${OFFSET}" -lt "${SIZE}" ]; do
              local END=$(( OFFSET + CHUNK_SIZE - 1 ))
              if [ "${END}" -ge "${SIZE}" ]; then END=$(( SIZE - 1 )); fi
              echo "Baixando bytes ${OFFSET}-${END} -> ${OUT}"
              get_range "$SRC" "${OUT}" "${OFFSET}" "${END}"
              OFFSET=$(( END + 1 ))
            done

            local HAVE
            HAVE="$(bytes_of "${OUT}")"
            echo "Baixado ${HAVE} bytes (esperado ${SIZE})"
            if [ "${HAVE}" -ne "${SIZE}" ]; then
              echo "Tamanho divergente. Abortando."
              exit 66
            fi

            echo "Primeiras linhas de ${OUT}:"
            head -n 5 "${OUT}" || true
          }

          dl () {
            local SRC="$1"; local OUT="$2"
            echo "==> Baixando (URL CRUA via Worker): ${SRC}"
            chunked_download "$SRC" "$OUT"
            local BYTES
            BYTES="$(wc -c < "$OUT" | tr -d ' ')"
            if [ "$BYTES" -lt 131072 ]; then
              echo "Arquivo suspeito (muito pequeno): $OUT ($BYTES bytes)"
              head -c 1024 "$OUT" | sed -e $'s/\r/\\r/g;s/\n/\\n\\\n/g' || true
              exit 67
            fi
            pigz -11 -f -k "$OUT"
          }

          mkdir -p out
          cd out

          dl "https://app.anm.gov.br/DadosAbertos/ARRECADACAO/CFEM_Arrecadacao.csv"   CFEM_Arrecadacao.csv
          dl "https://app.anm.gov.br/DadosAbertos/ARRECADACAO/CFEM_Distribuicao.csv"  CFEM_Distribuicao.csv
          dl "https://app.anm.gov.br/DadosAbertos/ARRECADACAO/CFEM_Autuacao.csv"      CFEM_Autuacao.csv
          dl "https://app.anm.gov.br/DadosAbertos/AMB/Producao_Bruta.csv"             Producao_Bruta.csv
          dl "https://app.anm.gov.br/DadosAbertos/AMB/Producao_Beneficiada.csv"       Producao_Beneficiada.csv

          cd ..

          # Tag 'latest' idempotente
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --tags
          git tag -f latest "${GITHUB_SHA}"
          git push -f origin refs/tags/latest

          # Publica release com sobrescrita de arquivos
          gh release view latest >/dev/null 2>&1 || gh release create latest -t latest -n "" || true
          gh release upload latest \
            out/CFEM_Arrecadacao.csv.gz \
            out/CFEM_Distribuicao.csv.gz \
            out/CFEM_Autuacao.csv.gz \
            out/Producao_Bruta.csv.gz \
            out/Producao_Beneficiada.csv.gz \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
